#!/usr/bin/env python3
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'mcp.settings' )

import django
django.setup()

import sys
import optparse

from mcp.Processor.models import QueueItem
from mcp.Project.models import Build, Project

oparser = optparse.OptionParser( description='Queue Job', usage='prog [options]\n-b/--build and -t/--target are mutually exclusive, only one of the will process.' )
oparser.add_option( '-p', '--priority', help='Queue Item Priority (default: 50)', dest='priority', default=50 )
oparser.add_option( '-r', '--branch', help='git branch to check out (default: master)', dest='branch', default='master' )
# oparser.add_option( '-e', '--resource-group', help='Resource Group to use (can be specified multiple times)', dest='resource_group', default=[], action='append' )
oparser.add_option( '-m', '--manual', help='Flag as Manual Build, ie: manual -> no auto cleanup (default: False)', dest='manual', default=False, action='store_true' )
oparser.add_option( '-o', '--project', help='Project to target', dest='project' )

ogroup = optparse.OptionGroup( oparser, 'Queue Build', '' )
ogroup.add_option( '-b', '--build', help='Pre-defined Build Name', dest='build' )
oparser.add_option_group( ogroup )

ogroup = optparse.OptionGroup( oparser, 'Queue Target', '' )
ogroup.add_option( '-t', '--target', help='Target Name', dest='target' )
ogroup.add_option( '-d', '--distro', help='Submit Task on Sepecified Distro', dest='distro' )
oparser.add_option_group( ogroup )

( options, args ) = oparser.parse_args()

if options.build:
  if not options.project:
    print( 'project is required for build' )
    sys.exit( 1 )

  try:
    project = Project.objects.get( pk=options.project )
  except Project.DoesNotExist:
    print( 'Project "{0}" not found'.format( options.project ) )
    sys.exit( 1 )

  try:
    build = Build.objects.get( project=project, name=options.build )
  except Build.DoesNotExist:
    print( 'Build "{0}" for project "{1}" not Found'.format( options.build, options.project ) )
    sys.exit( 1 )

  item = QueueItem.inQueueBuild( build, options.branch, options.manual, options.priority, '*CLI*' )

elif options.target:
  if not options.distro or not options.project:
    print( 'distro and project are required for target' )
    sys.exit( 1 )

  try:
    project = Project.objects.get( pk=options.project )
  except Project.DoesNotExist:
    print( 'Project "{0}" not found'.format( options.project ) )
    sys.exit( 1 )

  item = QueueItem.inQueueTarget( project, options.branch, options.manual, options.distro, options.target, options.priority, '*CLI*' )

else:
  oparser.print_help()
  sys.exit( 1 )

# group_list = []
# for name in options.resource_group:
#   try:
#     group = ResourceGroup.objects.get( name=name )
#   except ResourceGroup.DoesNotExist:
#     print( 'Resource Group "{0}" not found'.format( name ) )
#     item.delete()
#     sys.exit( 1 )
#
#   group_list.append( group )
#
# item.resource_groups = group_list
item.full_clean()
item.save()

print( 'Item "{0}" Queued'.format( item ) )
sys.exit( 0 )
