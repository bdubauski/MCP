#!/usr/bin/env python3
#
# recongnizer
#   Processes Records in the Commits table
#
#  Steps include test, build (rpm/dpkg/container/respkg/etc), and doc
#
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'mcp.settings' )

import django
django.setup()

import sys
import logging
from logging.handlers import SysLogHandler
from datetime import datetime, timezone

from django.conf import settings

from mcp.Processor.models import QueueItem
from mcp.Project.models import Commit
from mcp.lib.Slack import Slack

PID_FILE = '/var/run/recoginzer.pid'

QUEUE_PRIORITY = 100

logging.basicConfig()
logger = logging.getLogger()
handler = SysLogHandler( address='/dev/log', facility=SysLogHandler.LOG_DAEMON )
handler.setFormatter( logging.Formatter( fmt='recognizer[%(process)d]: %(message)s' ) )
logger.addHandler( handler )
logging.info( 'Starting...' )
if '-v' in sys.argv:
  logger.setLevel( logging.DEBUG )
elif '-c' in sys.argv:
  logger.setLevel( logging.ERROR )
else:
  logger.setLevel( logging.INFO )

if os.path.exists( PID_FILE ):
  logging.error( 'pid file exists, bailing...' )
  sys.exit( 0 )

tmp = open( PID_FILE, 'w' )
tmp.write( '{0}\n'.format( os.getpid() ) )
tmp.close()

slack = Slack( 'recognizer', settings.SLACK_API_TOKEN, settings.SLACK_CHANNEL, settings.SITE_NAME, settings.SLACK_PROXY )

# check for commits that need testing
for commit in Commit.objects.filter( done_at__isnull=True, test_at__isnull=True ):
  if not commit.test_results:
    slack.post_message( 'No Test for "{0}", branch "{1}".'.format( commit.project.name, commit.branch ), slack.INFO )
    commit.test_at = datetime.now( timezone.utc )
    commit.full_clean()
    commit.save()
    continue

  done = True
  success = True
  for distro in commit.test_results:
    if not commit.test_results[ distro ].get( 'status', None ):
      logging.info( 'Queuing up Test job for "{0}", branch "{1}", distro "{2}"'.format( commit.project.name, commit.branch, distro ) )
      try:
        item = QueueItem.inQueueTarget( commit.project, commit.branch, False, distro, 'test', QUEUE_PRIORITY, commit )
        commit.test_results[ distro ][ 'status' ] = 'building'

      except Exception as e:
        commit.test_results[ distro ][ 'status' ] = 'done'
        commit.test_results[ distro ][ 'results' ] = 'Exception Queuing: "{0}"'.format( e )

    done &= commit.test_results[ distro ][ 'status' ] == 'done'
    success &= commit.test_results[ distro ].get( 'success', False )

  if done:
    logging.info( 'Test Complete for "{0}", branch "{1}"'.format( commit.project.name, commit.branch ) )
    commit.test_at = datetime.now( timezone.utc )
    if not success:
      logging.info( 'Test for "{0}", branch "{1}" failed'.format( commit.project.name, commit.branch ) )
      commit.done_at = datetime.now( timezone.utc )
      slack.post_message( 'Test for "{0}", branch "{1}" Failed.'.format( commit.project.name, commit.branch ), slack.ERROR )
      commit.postResults()

    else:
      slack.post_message( 'Test for "{0}", branch "{1}" Success.'.format( commit.project.name, commit.branch ), slack.SUCCESS )

  commit.full_clean()
  commit.save()

# check for commits that need building
for commit in Commit.objects.filter( done_at__isnull=True, test_at__isnull=False, build_at__isnull=True ):
  if not commit.build_results:
    slack.post_message( 'No Build for "{0}".'.format( commit.project.name, slack.INFO ) )
    commit.build_at = datetime.now( timezone.utc )
    commit.full_clean()
    commit.save()
    continue

  done = True
  success = True
  for target in commit.build_results:
    for distro in commit.build_results[ target ]:
      if not commit.build_results[ target ][ distro ].get( 'status', None ):
        logging.info( 'Queuing up "{0}" job for "{1}", branch "{2}", distro "{3}"'.format( target, commit.project.name, commit.branch, distro ) )
        try:
          item = QueueItem.inQueueTarget( commit.project, commit.branch, False, distro, target, QUEUE_PRIORITY, commit )
          commit.build_results[ target ][ distro ][ 'status' ] = 'building'

        except Exception as e:
          commit.build_results[ target ][ distro ][ 'status' ] = 'done'
          commit.build_results[ target ][ distro ][ 'results' ] = 'Exception Queuing: "{0}"'.format( e )

      done &= commit.build_results[ target ][ distro ][ 'status' ] == 'done'
      success &= commit.build_results[ target ][ distro ].get( 'success', False )

  if done:
    logging.info( 'Build Complete for "{0}" of "{1}" branch "{2}" Complete'.format( commit.commit, commit.project.name, commit.branch ) )
    commit.build_at = datetime.now( timezone.utc )
    if not success:
      logging.info( 'Build for "{0}" of "{1}" branch "{2}" Failed'.format( commit.commit, commit.project.name, commit.branch ) )
      commit.done_at = datetime.now( timezone.utc )
      slack.post_message( 'Build for "{0}" of "{1}", branch "{2}" Failed.'.format( commit.commit, commit.project.name, commit.branch ), slack.ERROR )
      commit.postResults()

    else:
      slack.post_message( 'Build for "{0}" of "{1}", branch "{2}" Finished.'.format( commit.commit, commit.project.name, commit.branch ), slack.SUCCESS )

  commit.full_clean()
  commit.save()

# check for commits that need doc
for commit in Commit.objects.filter( done_at__isnull=True, test_at__isnull=False, build_at__isnull=False, doc_at__isnull=True ):
  if commit.branch != 'master':  # only build doc from master branch
    commit.doc_at = datetime.now( timezone.utc )
    commit.full_clean()
    commit.save()
    continue

  if not commit.doc_results:
    slack.post_message( 'No Doc for "{0}".'.format( commit.project.name ), slack.INFO )
    commit.doc_at = datetime.now( timezone.utc )
    commit.full_clean()
    commit.save()
    continue

  done = True
  success = True
  for distro in commit.doc_results:
    if not commit.doc_results[ distro ].get( 'status', None ):
      logging.info( 'Queuing up Doc job for "{0}", branch "{1}", distro "{2}"'.format( commit.project.name, commit.branch, distro ) )
      try:
        item = QueueItem.inQueueTarget( commit.project, commit.branch, False, distro, 'doc', QUEUE_PRIORITY, commit )
        commit.doc_results[ distro ][ 'status' ] = 'building'

      except Exception as e:
        commit.doc_results[ distro ][ 'status' ] = 'done'
        commit.doc_results[ distro ][ 'results' ] = 'Exception Queuing: "{0}"'.format( e )

    done &= commit.doc_results[ distro ][ 'status' ] == 'done'
    success &= commit.doc_results[ distro ].get( 'success', False )

  if done:  # failed doc building dosen't block anything, just make the comment and move on
    logging.info( 'Doc Complete for "{0}", branch "{1}"'.format( commit.project.name, commit.branch ) )
    commit.doc_at = datetime.now( timezone.utc )
    if not success:
      logging.info( 'Doc for "{0}", branch "{1}" failed'.format( commit.project.name, commit.branch ) )
      slack.post_message( 'Doc for "{0}", branch "{1}" Failed.'.format( commit.project.name, commit.branch ), slack.ERROR )

    else:
      slack.post_message( 'Doc for "{0}", branch "{1}" Success.'.format( commit.project.name, commit.branch ), slack.SUCCESS )

  commit.full_clean()
  commit.save()

# check for commits that are done
for commit in Commit.objects.filter( done_at__isnull=True, test_at__isnull=False, build_at__isnull=False, doc_at__isnull=False ):
  if commit.branch == 'master':  # tag version on master
    commit.tagVersion()

  slack.post_message( 'Commit "{0}" of "{1}", branch "{2}" Finished.'.format( commit.commit, commit.project.name, commit.branch ), slack.DONE )
  commit.done_at = datetime.now( timezone.utc )
  commit.postResults()
  commit.full_clean()
  commit.save()
  continue


os.unlink( PID_FILE )
logging.info( 'Done!' )
logging.shutdown()
sys.exit( 0 )
