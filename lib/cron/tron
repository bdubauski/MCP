#!/usr/bin/env python3
#
#  tron
#    retreive packages from packrat and track their status and handle promoting
#
#
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'mcp.settings' )

import django
django.setup()

import logging
import sys
import cinp
from logging.handlers import SysLogHandler
from datetime import datetime, timezone

from mcp.Project.models import Package, BuildDependancy, PackageFile
from mcp.Processor.models import Commit, Promotion, QueueItem, PromotionBuild
from mcp.lib.Packrat import getPackrat
from mcp.lib.Slack import getSlack

PID_FILE = '/var/run/tron.pid'

QUEUE_PRIORITY = 100

logging.basicConfig()
logger = logging.getLogger()
handler = SysLogHandler( address='/dev/log', facility=SysLogHandler.LOG_DAEMON )
handler.setFormatter( logging.Formatter( fmt='recognizer[%(process)d]: %(message)s' ) )
logger.addHandler( handler )
logging.info( 'Starting...' )
if '-v' in sys.argv:
  logger.setLevel( logging.DEBUG )
elif '-c' in sys.argv:
  logger.setLevel( logging.ERROR )
else:
  logger.setLevel( logging.INFO )

if os.path.exists( PID_FILE ):
  logging.error( 'pid file exists, bailing...' )
  sys.exit( 0 )

tmp = open( PID_FILE, 'w' )
tmp.write( '{0}\n'.format( os.getpid() ) )
tmp.close()

slack = getSlack( 'tron' )
packrat = getPackrat()

tag_requirements_map = dict( [ ( k, set( [ i.split( ':' )[1] for i in v ] ) ) for ( k, v ) in packrat.tag_requirements_map().items() ] )  # this makes sure the requrement values are unique
available_tag_set = set( tag_requirements_map.keys() )


def _tagCommit( commit, tag ):
  for package_file in PackageFile.objects.filter( commit=commit ):
    logging.info( 'Tagging package "{0}" with "{1}"...'.format( package_file.filename, tag ) )
    packrat.tag( package_file.packrat_id, tag )
    slack.post_message( 'Tagged package "{0}" with "{1}".'.format( package_file.filename, tag ), slack.SUCCESS )


def _failCommit( commit ):
  for package_file in PackageFile.objects.filter( commit=commit ):
    logging.info( 'Failing package "{0}"...'.format( package_file.filename ) )
    packrat.fail( package_file.packrat_id )
    slack.post_message( 'Failed package "{0}".'.format( package_file.filename ), slack.ERROR )


def _queuePromotion( commit, package_list, tag ):
  dependancy_list = BuildDependancy.objects.filter( package__in=package_list, tag=tag )
  if len( dependancy_list ) == 0:
    logging.info( 'No Dependancies for Commit "{0}" for tag "{1}", setting tags...'.format( commit.commit, tag ) )
    _tagCommit( commit, tag )
    return

  logging.info( 'Creating Promotion check for Commit "{0}" for tag "{1}"...'.format( commit.commit, tag ) )
  promotion = Promotion()
  promotion.commit = commit
  promotion.tag = tag
  promotion.full_clean()
  promotion.save()

  for dependancy in dependancy_list:
    promition_build = PromotionBuild()
    promition_build.promotion = promotion
    promition_build.build = dependancy.build
    promition_build.status = 'queued'
    promition_build.full_clean()
    promition_build.save()
    promotion.queueitem_set.add( QueueItem.inQueueBuild( dependancy.build, dependancy.build.project.release_branch, False, QUEUE_PRIORITY, '*AUTO*', promotion=promotion ) )

  logging.info( 'Tagging Commit "{0}" with "{1}"'.format( commit.commit, tag ) )
  _tagCommit( commit, tag )
  slack.post_message( 'Commit "{0}" tagged with "{1}" '.format( commit.commit, tag ), slack.SUCCESS )


# look for promotion that is done
for promotion in Promotion.objects.filter( done_at__isnull=True ):
  logging.debug( 'Checking promtion "{0}"...'.format( promotion ) )
  done = True
  success = True
  for promotion_build in promotion.promotionbuild_set.all():
    done &= ( promotion_build.status == 'done' )
    success &= bool( promotion_build.success )

  if not done:
    continue

  if success:
    slack.post_message( 'Promotion Job for Commit "{0}" tag "{1}" passed.'.format( promotion.commit.commit, promotion.tag ), slack.SUCCESS )
    logging.info( 'Promotion Job for Commit "{0}" tag "{1}" passed.'.format( promotion.commit.commit, promotion.tag ) )

  else:
    slack.post_message( 'Promotion Job for Commit "{0}" tag "{1}" Failed.'.format( promotion.commit.commit, promotion.tag ), slack.ERROR )
    logging.info( 'Failing Commit "{0}"...'.format( promotion.commit.commit ) )
    _failCommit( promotion.commit )

  promotion.done_at = datetime.now( timezone.utc )
  promotion.full_clean()
  promotion.save()


# look for promotion to cleanup
for promotion in Promotion.objects.filter( done_at__isnull=False ):
  if PackageFile.objects.filter( commit=promotion.commit ).count() == 0:
    promotion.delete()


# iterate over groups of package files
for commit in Commit.objects.filter( done_at__isnull=False ).exclude( packagefile=None ):
  if None in [ i.done_at for i in commit.promotion_set.all() ]:
    logging.info( 'Commit "{1}" has on going promotions, skipping...'.format( commit.commit ) )
    continue

  id_list = list( PackageFile.objects.filter( commit=commit ).values_list( 'packrat_id', flat=True ) )
  to_tag_list = []
  todo_tag_set = set()

  while id_list:
    packagefile_id = id_list.pop()
    try:
      package_file = packrat.cinp.get( packagefile_id )
    except cinp.client.NotFound:
      logging.info( 'Package File "{0}" in Commit "{1}" disapeared, deleting...'.format( packagefile_id, commit.commit ) )
      PackageFile.objects.get( packrat_id=packagefile_id ).delete()
      continue

    if package_file[ 'deprocated_at' ] or package_file[ 'failed_at' ]:  # we don't care about this file anymore, move along
      logging.info( 'Package File "{0}" in Commit "{1}" is deprocated/failed, skipping...'.format( packagefile_id, commit.commit ) )
      continue

    to_tag_list.append( packagefile_id )
    todo_tag_set = todo_tag_set.union( ( available_tag_set - set( package_file[ 'tags' ] ) ) )

  if not to_tag_list:  # nothing to do this time, try again next time, the packagefiles are either deleted or deprated/failed
    continue

  min_set_tags = available_tag_set - todo_tag_set
  for tag in todo_tag_set:  # Iterate over all the tags not yet set
    if len( tag_requirements_map[ tag ] - min_set_tags ) != 0:  # Not all requiremenets are met
      continue

    package_list = Package.objects.filter( packagefile__packrat_id__in=to_tag_list )
    _queuePromotion( commit, package_list, tag )

packrat.logout()

os.unlink( PID_FILE )
logging.info( 'Done!' )
logging.shutdown()
sys.exit( 0 )
